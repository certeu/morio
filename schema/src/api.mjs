import Joi from 'joi'

const shared = {
  setup: {
    /*
     * The setup_token is generated by us,
     * but should be passed in subsequent setup requests
     */
    setup_token: Joi.string().trim().min(16).max(128),
  },
}

/*
 * This describes the schema of request objects
 */
export const requestSchema = {
  setup: {
    morio: Joi.object({
      nodes: Joi.array().items(Joi.string()).min(1).max(15).unique().required(),
    }),
    jwtkey: Joi.object({
      setup_token: shared.setup.setup_token,
    }),
    password: Joi.object({
      setup_token: shared.setup.setup_token,
      /*
       * Bytes controls the length of the generated password
       */
      bytes: Joi.number().min(8).max(64).default(16),
    }),
    keypair: Joi.object({
      setup_token: shared.setup.setup_token,
      /*
       * Passphrase is used to encrypt the private key
       */
      passphrase: Joi.string().min(8).max(64).required(),
    }),
  },
  validate: {
    configuration: Joi.object({
      config: Joi.object(),
    }),
  },
}

/*
 * This describes the schema of response objects
 */
export const responseSchema = {
  setup: {
    morio: Joi.object({
      setup_token: Joi.string(),
    }),
    jwtkey: Joi.object({
      jwt_key: Joi.string(),
    }),
    password: Joi.object({
      password: Joi.string(),
    }),
    keypair: Joi.object({
      public: Joi.string(),
      private: Joi.string(),
    }),
  },
  status: Joi.object({
    name: Joi.string(),
    about: Joi.string(),
    version: Joi.string(),
    uptime: Joi.string(),
    uptime_seconds: Joi.number(),
    setup: Joi.bool(),
  }),
  validate: {
    config: Joi.object({}),
  },
}

/*
 * This describes the schema of error responses
 */
export const errorsSchema = Joi.object({ errors: Joi.array().items(Joi.string()) })
