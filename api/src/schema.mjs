import { Joi, validate as sharedValidate, settings, uuid, mrt } from '#shared/schema'
import { roles } from '#config/roles'

/*
 * Some re-usable schema blocks
 */
const about = Joi.string().min(2).max(255)
const provider = Joi.string().min(2).max(255)
const role = Joi.string().allow(roles.join())
const username = Joi.string().min(2).max(255)
const overwrite = Joi.boolean().valid(true, false)
const password = Joi.string().min(3).max(1024)
const token = Joi.string().min(3).max(12)

/*
 * This describes the schema of requests and responses in the Core API
 */
export const schema = {
  /*
   * Requests
   */
  'req.setup': settings,
  'req.account.create': Joi.object({
    about,
    provider: provider.required(),
    role: role.required(),
    username: username.required(),
    overwrite: overwrite.optional(),
  }),
  'req.account.activate': Joi.object({
    invite: Joi.string().length(48).required(),
    provider: provider.required(),
    username: username.required(),
  }),
  'req.account.activatemfa': Joi.object({
    invite: Joi.string().length(48).required(),
    provider: provider.required(),
    token: token.required(),
    password: password.required(),
    username: username.required(),
  }),
  'req.apikey.create': Joi.object({
    name: Joi.string().required().min(2),
    expires: Joi.number().required().min(1).max(730),
    role: role.required(),
    overwrite: overwrite.optional(),
  }),
  'req.apikey.update': Joi.object({
    key: uuid.required(),
    action: Joi.number().required().valid('rotate', 'disable', 'enable'),
  }),
  'req.apikey.delete': Joi.object({
    key: uuid.required(),
  }),
  'req.auth.login': Joi.object({
    provider: provider.required(),
    data: Joi.object().required(),
  }),
  'req.auth.login.apikey': Joi.object({
    provider: provider.valid('apikey').required(),
    data: Joi.object({
      password: Joi.string().length(96),
      username: Joi.string().length(36).required(),
    }).required(),
  }),
  'req.auth.login.local': Joi.object({
    provider: provider.valid('local').required(),
    data: Joi.object({
      password: password.required(),
      username: username.required(),
      token: token.required(),
      role: role.required(),
    }).required(),
  }),
  'req.auth.login.ldap': Joi.object({
    provider: provider.valid('ldap').required(),
    data: Joi.object({
      password: password.required(),
      username: username.required(),
      role: role.required(),
    }).required(),
  }),
  'req.auth.login.mrt': Joi.object({
    provider: provider.valid('mrt').required(),
    data: Joi.object({
      mrt: mrt.required(),
      role: role.optional(),
    }).required(),
  }),
}

/*
 * Validation method to check data against the schema
 *
 * @param {string} key - The key in the schema obhject
 * @param {object} input - The input to validate
 * @retrn {object} result - The validation result
 */
export const validate = async (key, input) => await sharedValidate(key, input, schema)

// FIXME: Legacy validation below
//
// FIXME: what is this token again?
const shared = {
  setup: {
    /*
     * The setup_token is generated by us,
     * but should be passed in subsequent setup requests
     */
    setup_token: Joi.string().trim().min(16).max(128),
  },
}

/*
 * This describes the schema of the cluster settings
 */
export const clusterSchema = Joi.object({
  name: Joi.string().required().min(2).max(255),
  broker_nodes: Joi.array()
    .items(Joi.string().hostname())
    .length(1)
    .length(3)
    .length(6)
    .length(7)
    .length(9),
  flanking_nodes: Joi.array().items(Joi.string().hostname()),
  fqdn: Joi.string()
    .hostname()
    .when('broker_nodes', {
      is: Joi.array().max(1),
      then: Joi.optional(),
      otherwise: Joi.required(),
    }),
})

/*
 * This describes the schema of the cluster settings
 */
export const settingsSchema = Joi.object({
  cluster: clusterSchema,
  metadata: Joi.object({
    version: Joi.number(),
    comment: Joi.string(),
  }),
  connector: Joi.object(),
  tokens: Joi.object({
    vars: Joi.object(),
    secrets: Joi.object(),
    flags: Joi.object(),
  }),
  iam: Joi.object({
    providers: Joi.object(),
    ui: Joi.object({
      visibility: Joi.object().optional(),
      order: Joi.array().optional(),
    }).optional(),
  }),
})

/*
 * This describes the schema of request objects
 * FIXME: This needs to be refactored
 */
export const requestSchema = {
  setup: {
    cluster: Joi.object({
      broker_nodes: Joi.array().items(Joi.string()).min(1).max(15).unique().required(),
    }),
    jwtkey: Joi.object({
      setup_token: shared.setup.setup_token,
    }),
    password: Joi.object({
      setup_token: shared.setup.setup_token,
      /*
       * Bytes controls the length of the generated password
       */
      bytes: Joi.number().min(8).max(64).default(16),
    }),
    keypair: Joi.object({
      setup_token: shared.setup.setup_token,
      /*
       * Passphrase is used to encrypt the private key
       */
      passphrase: Joi.string().min(8).max(64).required(),
    }),
  },
}

/*
 * This describes the schema of response objects
 * FIXME: This needs to be refactored
 */
export const responseSchema = {
  setup: {
    morio: Joi.object({
      setup_token: Joi.string(),
    }),
    jwtkey: Joi.object({
      jwt_key: Joi.string(),
    }),
    password: Joi.object({
      password: Joi.string(),
    }),
    keypair: Joi.object({
      public: Joi.string(),
      private: Joi.string(),
    }),
  },
  status: Joi.object({
    name: Joi.string(),
    about: Joi.string(),
    version: Joi.string(),
    uptime: Joi.string(),
    uptime_seconds: Joi.number(),
    setup: Joi.bool(),
  }),
  validate: {
    config: Joi.object({}),
  },
}

/*
 * This describes the schema of error responses
 */
export const errorsSchema = Joi.object({ errors: Joi.array().items(Joi.string()) })
