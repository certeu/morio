import { useState, useEffect } from 'react'
import { useApi } from 'hooks/use-api.mjs'
// Components
import { PageWrapper } from 'components/layout/page-wrapper.mjs'
import { ContentWrapper } from 'components/layout/content-wrapper.mjs'
import { WebLink } from 'components/link.mjs'
import { CertificateIcon, BoolYesIcon, BoolNoIcon } from 'components/icons.mjs'
import { Popout } from 'components/popout.mjs'
import { Highlight } from 'components/highlight.mjs'
import { CopyToClipboard } from 'components/copy-to-clipboard.mjs'

const loading = <p>Loading...</p>

const CaPage = (props) => {
  const { api } = useApi()
  const [root, setRoot] = useState(false)
  const [config, setConfig] = useState(false)

  useEffect(() => {
    const loadRoot = async () => {
      const [rootContent, rootStatus] = await api.getCaRoot()
      if (rootStatus === 200) setRoot(rootContent)
      else setRoot(true)
      const [configContent, configStatus] = await api.getCurrentConfig()
      if (configStatus === 200) setConfig(configContent)
    }
    if (!root) loadRoot()
    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, [])

  return (
    <PageWrapper {...props}>
      <ContentWrapper {...props} Icon={CertificateIcon} title={props.title}>
        <div className="max-w-prose">
          <p className="max-w-prose">
            Morio relies on X509 certificates for TLS encryption, authentication, and access
            control. These certificates are provided by an internal certificate authority (CA)
            based on{' '}
            <WebLink href="https://smallstep.com/docs/step-ca/index.html">step-ca</WebLink>.
          </p>
          <p className="max-w-prose">
            The internal CA is initialized when Morio is first deployed. The CA is tied to the
            Morio deployment, so different Morio deployments will have a different CA.
          </p>

          <h2>Certificate Authority Root Fingerprint</h2>
          {root.fingerprint ? (
            <div className="flex flex-row gap-2 items-center">
              <CopyToClipboard content={root.fingerprint} />
              <pre className="text-xs my-2">{root.fingerprint}</pre>
            </div>
          ) : (
            loading
          )}

          <h2>Certificate Authority Root Certificate</h2>
          {root.certificate ? (
            <div className="flex flex-row gap-2 items-center">
              <CopyToClipboard content={root.certificate} />
              <pre className="text-xs my-2">{root.certificate}</pre>
            </div>
          ) : (
            loading
          )}
          {root === true ? (
            <Popout warning>
              <h5>Failed to load the root certificate</h5>
              <p>We were unable to load the root certificate. This is unexpected.</p>
              <p>
                You can try yourself with{' '}
                <WebLink href="/roots.pem">this link to the root certificate</WebLink>.
              </p>
            </Popout>
          ) : null}
          {root === false ? (
            <Popout important>
              <h5>loading</h5>
            </Popout>
          ) : null}

          <Popout important>
            <h4>Can you trust this Certificate Authority?</h4>
            <p className="text-sm">
              Out of the box, this Certificate Authority (CA) will not be trusted by any of your systems.
              Your browser will complain when visiting this website, and any software connecting
              to Morio will also be unhappy.
            </p>
            <p className="text-sm">
              Before we go into how to fix that, we should clarify what is safe to trust.
            </p>
            <h5>Trust the encryption</h5>
            <p className="text-sm">
              Certificates are a requirement for TLS which allows us to encrypt traffic on the
              network.
              You can trust that the certificates provided by this CA will keep your data secure
              while in transit.
            </p>
            <h5>Verify the identity</h5>
            <p className="text-sm">
              Certificates can also be used to verify an identity.
              You should not rely on this CA for such verification.
              Instead, use your own judgement to
              determine whether a remote party presenting a certificate issued by this CA is
              trustworthy.
            </p>
          </Popout>
          <h2>Fixing trust issues</h2>
          <p className="max-w-prose">
            To make those error messages in your browser go away, you need to trust the
            certificates generated by this CA. There are different ways you can accomplish this:
          </p>

          <h3>Trust this CA</h3>
          <p className="max-w-prose">
            The simplest solution is to add{' '}
            <WebLink href="/roots.pem">this CA&apos;s root certificate</WebLink> as a trusted
            root CA in your operating system&apos;s trust store.
          </p>
          <ul className="p-4 border rounded-lg max-w-prose ml-4 mb-4">
            <li className="flex flex-row gap-2 items-center mb-2">
              <BoolYesIcon /> Easy to do
            </li>
            <li className="flex flex-row gap-2 items-center mb-2">
              <BoolYesIcon /> No infrastructure requirements
            </li>
            <li className="flex flex-row gap-2 items-center">
              <BoolNoIcon /> Needs to be done on every client connecting to Morio
            </li>
          </ul>
          <h3>Cross-sign this CA&apos;s intermediate certificate with your own CA</h3>
          <p className="max-w-prose">
            If you have your own internal CA, you can cross-sign the intermediate certificate of
            this CA. Doing so will make this CA a so-called <em>subordinate</em> of your
            internal CA, and systems that trust your internal CA will also trust certificates
            issues by this CA.
          </p>
          <ul className="p-4 border rounded-lg max-w-prose ml-4 mb-4">
            <li className="flex flex-row gap-2 items-center mb-2">
              <BoolYesIcon /> Transparent to clients
            </li>
            <li className="flex flex-row gap-2 items-center mb-2">
              <BoolYesIcon /> Requires only central changes
            </li>
            <li className="flex flex-row gap-2 items-center">
              <BoolNoIcon /> Requires an internal CA
            </li>
          </ul>
          <Popout fixme compact>
            Implement support for this
          </Popout>
          <h2>Using the Certificate Authority</h2>
          <h3>With step-cli</h3>
          <ul>
            <li>
              Install{' '}
              <WebLink href="https://smallstep.com/docs/step-cli/">
                the Step command-line client
              </WebLink>
            </li>
            <li>Bootstrap the client configuration with the following command:</li>
          </ul>
          {root.fingerprint && config.core?.nodes?.[0] ? (
            <Highlight
              title="Bootstrap step"
              raw={`step ca bootstrap \\<br />  --ca-url https://${config.core.nodes[0]}/ \\<br />  --fingerprint ${root.fingerprint}`}
            />
          ) : (
            loading
          )}
        </div>
      </ContentWrapper>
    </PageWrapper>
  )
}

export default CaPage

export const getStaticProps = () => ({
  props: {
    title: 'Certificate Authority',
    page: ['components', 'ca'],
  },
})
