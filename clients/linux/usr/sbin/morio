#!/bin/bash

# morio - A cli interface to the morio client and beats agents

# Set up variables
MORIO_VERSION=0.1.0

show_help() {
    echo "Usage:"
    echo "  morio [options]"
    echo "  morio [command]"
    echo ""
    echo "Available Commands:"
    echo "  apt         Add the Elastic APT repository to the system (to install beats agents)"
    echo "  audit       Invokes auditbeat agent"
    echo "  cc          Set up morio command completion"
    echo "  flags       Manage template flags for use in the morio beats agents configuration"
    echo "  logs        Invokes filebeat agent"
    echo "  metrics     Invokes metricbeat agent"
    echo "  restart     Restart morio beats agents"
    echo "  start       Start morio beats agents"
    echo "  status      Show status of the morio beats agents"
    echo "  stop        Stop morio beats agents"
    echo "  template    Template-out the morio beats agents configuration"
    echo "  vars        Manage template variables for use in the morio beats agents configuration"
    echo ""
    echo "Options:"
    echo "  -h, --help       Display this help message"
    echo "  -v, --version    Display version information"
    echo ""
    echo "Use \"morio [command] --help\" for more information about a command."
    exit 0
}

show_vars_help() {
    echo "Description:"
    echo "  Manage template variables for the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars [options]"
    echo "  morio vars [commamd]"
    echo ""
    echo "Available Commands:"
    echo "  dump    List the current morio vars and their values"
    echo "  edit    Opens an editor to edit a morio variable"
    echo "  ls      List the current morio vars"
    echo "  set     Set the value of a morio variable"
    echo "  rm      Remove a morio variable"
    echo "  wipe    Removes all morio variables"
    echo ""
    echo "Options:"
    echo "  -h, --help       Display this help message"
    echo ""
    echo "Use \"morio vars [command] --help\" for more information about a vars command."
    exit 0
}

show_vars_edit_help() {
    echo "Description:"
    echo "  Opens an editor to update a variable set on this sytem to template the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars edit [variable]"
    echo ""
    echo "Example:"
    echo "  - Edit the variable PROXY_LOG_FILE:"
    echo "    morio vars edit PROXY_LOG_FILE"
    exit 0
}

show_vars_ls_help() {
    echo "Description:"
    echo "  List the variables set on this sytem to template the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars ls"
    exit 0
}

show_vars_dump_help() {
    echo "Description:"
    echo "  List the variables and values set on this sytem to template the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars dump"
    exit 0
}

show_vars_rm_help() {
    echo "Description:"
    echo "  Removes a variable set on this sytem to template the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars rm [variable]"
    echo ""
    echo "Example:"
    echo "  - Remove the variable PROXY_LOG_FILE:"
    echo "    morio vars rm PROXY_LOG_FILE"
    exit 0
}

show_vars_wipe_help() {
    echo "Description:"
    echo "  Removes all variables set on this sytem to template the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars wipe"
    exit 0
}

show_vars_set_help() {
    echo "Description:"
    echo "  Sets a variable to be used when templating the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio vars set [name] [value]"
    echo ""
    echo "Example:"
    echo "  - Set the variable PROXY_LOG_FILE to /var/log/proxy.log:"
    echo "    morio vars set PROXY_LOG_FILE /var/log/proxy.log"
    exit 0
}

show_flags_help() {
    echo "Description:"
    echo "  Manage boolean template variables (flags) for the Morio beats agents configuration."
    echo ""
    echo "  Flags are template variables (vars) that are either true or false."
    echo "  Because they are vars, flags can also be managed with the vars command."
    echo "  The flags commands is provided for convenience."
    echo ""
    echo "Usage:"
    echo "  morio flags -h"
    echo "  morio flags [commamd]"
    echo ""
    echo "Available Commands:"
    echo "  disable  Disable a flag (sets variable to false)"
    echo "  enable   Enable a flag (sets variable to true)"
    echo "  rm       Remove a morio flag (removes variable)"
    echo ""
    echo "Options:"
    echo "  -h, --help       Display this help message"
    echo ""
    echo "Use \"morio flags [command] --help\" for more information about a vars command."
    exit 0
}

show_flags_enable_help() {
    echo "Description:"
    echo "  Enables a flag by setting its variable to true."
    echo ""
    echo "Usage:"
    echo "  morio flags enable [name]"
    echo ""
    echo "Example:"
    echo "  - Enable the MORIO_DEBUG flag (sets the MORIO_DEBUG variable to true):"
    echo "    morio flags enable MORIO_DEBUG"
    exit 0
}

show_flags_disable_help() {
    echo "Description:"
    echo "  Disables a flag by setting its variable to false."
    echo ""
    echo "Usage:"
    echo "  morio flags enable [name]"
    echo ""
    echo "Example:"
    echo "  - Disable the MORIO_DEBUG flag (sets the MORIO_DEBUG variable to false):"
    echo "    morio flags disable MORIO_DEBUG"
    exit 0
}

show_flags_rm_help() {
    echo "Description:"
    echo "  Removes a flag by removing its variable."
    echo ""
    echo "Usage:"
    echo "  morio flags rm [flag]"
    echo ""
    echo "Example:"
    echo "  - Remove the MORIO_DEBUG flag (removes the MORIO_DEBUG variable):"
    echo "    morio flags rm MORIO_DEBUG"
    exit 0
}

show_apt_help() {
    echo "Description:"
    echo "  Configures the Elastic repository as an APT source so Morio dependencies (beats) can be installed."
    echo ""
    echo "Usage:"
    echo "  morio apt"
    exit 0
}

show_restart_help() {
    echo "Description:"
    echo "  Restarts the Morio beats agents."
    echo ""
    echo "Usage:"
    echo "  morio restart"
    exit 0
}

show_start_help() {
    echo "Description:"
    echo "  Starts the Morio beats agents."
    echo ""
    echo "Usage:"
    echo "  morio start"
    exit 0
}

show_stop_help() {
    echo "Description:"
    echo "  Stops the Morio beats agents."
    echo ""
    echo "Usage:"
    echo "  morio stop"
    exit 0
}

show_status_help() {
    echo "Description:"
    echo "  Shows the status of the Morio beats agents."
    echo ""
    echo "Usage:"
    echo "  morio status"
    exit 0
}

show_template_help() {
    echo "Description:"
    echo "  Templates out the Morio beats agents configuration."
    echo ""
    echo "Usage:"
    echo "  morio template"
    exit 0
}

show_cc_help() {
    echo "Description:"
    echo "  Set up command completion for morio"
    echo ""
    echo "Usage:"
    echo "  morio cc"
    exit 0
}

show_version() {
    echo $MORIO_VERSION
    exit 0
}

change_agents_state() {
  # Check for systemd
  which systemctl 2> /dev/null
  # Action to take
  local STATE="$1"
  if [ $? -eq 0 ]
  then
    CMDO="systemctl $STATE morio-audit"
    echo $CMDO
    systemctl $STATE morio-audit
    systemctl $STATE morio-logs
    systemctl $STATE morio-metrics
  else
    /etc/init.d/morio-audit $STATE
    /etc/init.d/morio-logs $STATE
    /etc/init.d/morio-metrics $STATE
  fi
}

add_elastic_repo() {
  #
  # Keep this idempotent
  #
  if file /etc/apt/sources.list.d/elastic-8.x.list >/dev/null ; then
    echo "Elastic repository already configured"
    exit 0
  else
    #
    # Figure out what tool we can use to download
    #
    if which wget >/dev/null ; then
      wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    elif which curl >/dev/null ; then
        curl --option argument
    else
        echo "Cannot download signing key, neither wget nor curl found."
        exit 1
    fi

    #
    # APT repos typically are hosted on HTTP (which is fine coz checksums)
    # Using an APT repo over HTTPS requires the apt-transport-https package
    #
    apt-get install -y apt-transport-https

    #
    # Now add the APT repo from Elastic
    #
    echo "deb https://artifacts.elastic.co/packages/8.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-8.x.list

    #
    # Finally run apt-update
    #
    sudo apt update
  fi
}

suggest_cc() {
  if grep -q "source /var/lib/morio/morio-completion.sh" ~/.bashrc ; then
    echo "Auto-completion for morio is already set up."
    echo "If it does not work, please restart your shell or run source ~/.bashrc to apply the changes."
  else
    echo "To enable command completion for the morio command, add the following line to your ~/.bashrc file:"
    echo ""
    echo "  source /var/lib/morio/morio-completion.sh"
    echo ""
    read -p "Do you want morio to add this line for you? (y/n): " response
    if [[ "$response" =~ ^[Yy]$ ]]; then
      echo "" >> ~/.bashrc
      echo "# morio auto-completion" >> ~/.bashrc
      echo "source /var/lib/morio/morio-completion.sh" >> ~/.bashrc
      echo "Auto-completion for morio is now set up."
      echo "Restart your shell or run source ~/.bashrc to apply the changes."
      exit 0
    else
      echo "Ok $response"
    fi
  fi
  exit 0
}

manage_vars() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
      show_vars_help
      ;;
    edit)
      case $2 in
        -h|--help)
        show_vars_edit_help
        ;;
        *)
        check_your_privilege
        if [ -z "$EDITOR" ]; then
          EDITOR="vi"
        fi
        $EDITOR /etc/morio/vars/$2
      esac
      exit 0
      ;;
    ls)
      case $2 in
        -h|--help)
        show_vars_ls_help
        ;;
        *)
        check_your_privilege
        ls -1 /etc/morio/vars
      esac
      exit 0
      ;;
    dump)
      case $2 in
        -h|--help)
        show_vars_ls_help
        ;;
        *)
        check_your_privilege
        for file in "/etc/morio/vars"/*; do
          if [ -f "$file" ]; then
            echo "$(basename $file): `cat $file`"
          fi
        done
      esac
      exit 0
      ;;
    set)
      case $2 in
        -h|--help)
        show_vars_set_help
        ;;
        *)
        check_your_privilege
        echo $3 > /etc/morio/vars/$2
      esac
      exit 0
      ;;
    rm)
      case $2 in
        -h|--help)
        show_vars_rm_help
        ;;
        *)
        check_your_privilege
        rm -f /etc/morio/vars/$2
      esac
      exit 0
      ;;
    wipe)
      case $2 in
        -h|--help)
        show_vars_wipe_help
        ;;
        *)
        check_your_privilege
        rm -f /etc/morio/vars/*
      esac
      exit 0
      ;;
    *)
      echo "Invalid vars command: $1"
      show_vars_help
      ;;
    esac
    shift
  done
  if [ $# -eq 0 ]; then
      show_vars_help
  fi
}

manage_flags() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h|--help)
      show_flags_help
      ;;
    disable)
      case $2 in
        -h|--help)
        show_flags_disable_help
        ;;
        *)
        check_your_privilege
        echo false > /etc/morio/vars/$2
      esac
      exit 0
      ;;
    enable)
      case $2 in
        -h|--help)
        show_flags_enable_help
        ;;
        *)
        check_your_privilege
        echo true > /etc/morio/vars/$2
      esac
      exit 0
      ;;
    rm)
      case $2 in
        -h|--help)
        show_flags_rm_help
        ;;
        *)
        check_your_privilege
        rm -f /etc/morio/vars/$2
      esac
      exit 0
      ;;
    *)
      echo "Invalid flags command: $1"
      show_flags_help
      ;;
    esac
    shift
  done
  if [ $# -eq 0 ]; then
      show_flags_help
  fi
}

template_out_config() {
  # Allow 'false' to be false
  export MO_FALSE_IS_EMPTY=1
  echo "Loading vars"
  for file in "/etc/morio/vars"/*; do
    NAME="$(basename $file)"
    export ${NAME}=$(cat $file)
  done
  echo "Templating out audit configuration"
  /usr/sbin/morio-template "/etc/morio/audit/config-template.yml" > "/etc/morio/audit/config.yml"
  for file in "/etc/morio/audit/module-templates.d"/*; do
    /usr/sbin/morio-template $file > "/etc/morio/audit/modules.d/$(basename $file)"
  done
  echo "Templating out logs configuration"
  /usr/sbin/morio-template "/etc/morio/logs/config-template.yml" > "/etc/morio/logs/config.yml"
  for file in "/etc/morio/logs/module-templates.d"/*; do
    /usr/sbin/morio-template $file > "/etc/morio/logs/modules.d/$(basename $file)"
  done
  for file in "/etc/morio/logs/input-templates.d"/*; do
    /usr/sbin/morio-template $file > "/etc/morio/logs/inputs.d/$(basename $file)"
  done
  echo "Templating out metrics configuration"
  /usr/sbin/morio-template "/etc/morio/metrics/config-template.yml" > "/etc/morio/metrics/config.yml"
  for file in "/etc/morio/metrics/module-templates.d"/*; do
    /usr/sbin/morio-template $file > "/etc/morio/metrics/modules.d/$(basename $file)"
  done
}

check_your_privilege() {
  if [ "$EUID" -eq 0 ]; then
      true
  else
      echo "Morio requires elevated privileges."
      echo "Please use sudo, or run this command as root."
      exit 1
  fi
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      show_help
      ;;
    -v|--version)
      show_version
      ;;
    apt)
      case $2 in
        -h|--help)
        show_apt_help
        ;;
        *)
        check_your_privilege
        add_elastic_repo
      esac
      exit 0
      ;;
    cc)
      case $2 in
        -h|--help)
        show_cc_help
        ;;
        *)
        suggest_cc
      esac
      exit 0
      ;;
    audit)
      check_your_privilege
      # Pass all but the first argument to auditbeat with the morio config
      /usr/share/auditbeat/bin/auditbeat -c /etc/morio/audit/config.yml ${@:2}
      exit 0
      ;;
    flags)
      manage_flags ${@:2}
      exit 0
      ;;
    logs)
      check_your_privilege
      # Pass all but the first argument to filebeat with the morio config
      /usr/share/filebeat/bin/filebeat -c /etc/morio/logs/config.yml ${@:2}
      exit 0
      ;;
    metrics)
      check_your_privilege
      # Pass all but the first argument to metricbeat with the morio config
      /usr/share/metricbeat/bin/metricbeat -c /etc/morio/metrics/config.yml ${@:2}
      exit 0
      ;;
    start)
      case $2 in
        -h|--help)
        show_start_help
        ;;
        *)
        check_your_privilege
        change_agents_state start
      esac
      exit 0
      ;;
    stop)
      case $2 in
        -h|--help)
        show_stop_help
        ;;
        *)
        check_your_privilege
        change_agents_state stop
      esac
      exit 0
      ;;
    restart)
      case $2 in
        -h|--help)
        show_restart_help
        ;;
        *)
        check_your_privilege
        change_agents_state restart
      esac
      exit 0
      ;;
    status)
      case $2 in
        -h|--help)
        show_status_help
        ;;
        *)
        check_your_privilege
        change_agents_state status
      esac
      exit 0
      ;;
    template)
      case $2 in
        -h|--help)
        show_template_help
        ;;
        *)
        check_your_privilege
        template_out_config
      esac
      exit 0
      ;;
    vars)
      manage_vars ${@:2}
      exit 0
      ;;
    *)
      echo "Invalid option: $1"
      show_help
      ;;
  esac
  shift
done

# If no options were provided, show the general help
if [ $# -eq 0 ]; then
    show_help
fi

